{"ast":null,"code":"var _jsxFileName = \"D:\\\\projects\\\\web_project_01\\\\Frontend\\\\web_project\\\\src\\\\Component\\\\Common\\\\ItemList.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\nimport Resizer from 'react-image-file-resizer';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ItemList = () => {\n  _s();\n  const [items, setItems] = useState([]);\n  useEffect(() => {\n    // Fetch items from the backend API\n    const fetchItems = async () => {\n      try {\n        const response = await fetch('http://localhost:8080/api/v1/item/seller/7afa80cc-e278-4a38-b41a-9be258b1fe99');\n        const data = await response.json();\n        // Resize images before setting the state\n        const itemsWithResizedImages = await Promise.all(data.map(async item => {\n          const resizedImage = await resizeImage(item.itemPhoto1.data, 100, 100); // Adjust the size as needed\n          return {\n            ...item,\n            itemPhoto1: {\n              ...item.itemPhoto1,\n              data: resizedImage\n            }\n          };\n        }));\n        setItems(itemsWithResizedImages);\n      } catch (error) {\n        console.error('Error fetching items:', error);\n      }\n    };\n    fetchItems();\n  }, []);\n  const resizeImage = (imageData, newWidth, newHeight) => {\n    return new Promise((resolve, reject) => {\n      Resizer.imageFileResizer(imageData, newWidth, newHeight, 'JPEG',\n      // Output format\n      100,\n      // Image quality\n      0,\n      // Rotation\n      uri => {\n        resolve(uri);\n      }, 'base64' // Output type\n      );\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Item List\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: items.map(item => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: /*#__PURE__*/_jsxDEV(Link, {\n          to: `/items/${item.id}`,\n          children: [/*#__PURE__*/_jsxDEV(\"img\", {\n            src: `data:${item.itemPhoto1.photoType};base64,${item.itemPhoto1.data}`,\n            alt: item.title\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 54,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: item.title\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 55,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 13\n        }, this)\n      }, item.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 5\n  }, this);\n};\n_s(ItemList, \"E85yb7BhBnl3/OpymRdjFiQJ97s=\");\n_c = ItemList;\nexport default ItemList;\nvar _c;\n$RefreshReg$(_c, \"ItemList\");","map":{"version":3,"names":["React","useState","useEffect","Link","Resizer","jsxDEV","_jsxDEV","ItemList","_s","items","setItems","fetchItems","response","fetch","data","json","itemsWithResizedImages","Promise","all","map","item","resizedImage","resizeImage","itemPhoto1","error","console","imageData","newWidth","newHeight","resolve","reject","imageFileResizer","uri","children","fileName","_jsxFileName","lineNumber","columnNumber","to","id","src","photoType","alt","title","_c","$RefreshReg$"],"sources":["D:/projects/web_project_01/Frontend/web_project/src/Component/Common/ItemList.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport Resizer from 'react-image-file-resizer';\r\n\r\nconst ItemList = () => {\r\n  const [items, setItems] = useState([]);\r\n\r\n  useEffect(() => {\r\n    // Fetch items from the backend API\r\n    const fetchItems = async () => {\r\n      try {\r\n        const response = await fetch('http://localhost:8080/api/v1/item/seller/7afa80cc-e278-4a38-b41a-9be258b1fe99');\r\n        const data = await response.json();\r\n        // Resize images before setting the state\r\n        const itemsWithResizedImages = await Promise.all(\r\n          data.map(async item => {\r\n            const resizedImage = await resizeImage(item.itemPhoto1.data, 100, 100); // Adjust the size as needed\r\n            return { ...item, itemPhoto1: { ...item.itemPhoto1, data: resizedImage } };\r\n          })\r\n        );\r\n        setItems(itemsWithResizedImages);\r\n      } catch (error) {\r\n        console.error('Error fetching items:', error);\r\n      }\r\n    };\r\n\r\n    fetchItems();\r\n  }, []);\r\n\r\n  const resizeImage = (imageData, newWidth, newHeight) => {\r\n    return new Promise((resolve, reject) => {\r\n      Resizer.imageFileResizer(\r\n        imageData,\r\n        newWidth,\r\n        newHeight,\r\n        'JPEG', // Output format\r\n        100, // Image quality\r\n        0, // Rotation\r\n        uri => {\r\n          resolve(uri);\r\n        },\r\n        'base64' // Output type\r\n      );\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h1>Item List</h1>\r\n      <ul>\r\n        {items.map(item => (\r\n          <li key={item.id}>\r\n            <Link to={`/items/${item.id}`}>\r\n              <img src={`data:${item.itemPhoto1.photoType};base64,${item.itemPhoto1.data}`} alt={item.title} />\r\n              <p>{item.title}</p>\r\n            </Link>\r\n          </li>\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ItemList;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}