{"ast":null,"code":"var _jsxFileName = \"D:\\\\projects\\\\web_project_01\\\\Frontend\\\\web_project\\\\src\\\\Component\\\\Common\\\\RegistrationForm.jsx\",\n  _s = $RefreshSig$();\n// RegistrationForm.jsx\n\nimport React, { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst RegistrationForm = () => {\n  _s();\n  const navigate = useNavigate();\n\n  // Form state\n  const [formData, setFormData] = useState({\n    fullName: '',\n    nickName: '',\n    dob: '',\n    gender: '',\n    address: '',\n    telephone: '',\n    email: '',\n    password: '',\n    confirmPassword: '',\n    otp: '',\n    otpEmail: '' // new field to store email for OTP verification\n  });\n  const [isOtpSent, setIsOtpSent] = useState(false);\n  const [otpCountdown, setOtpCountdown] = useState(120); // 2 minutes\n\n  useEffect(() => {\n    let timer;\n    if (isOtpSent && otpCountdown > 0) {\n      timer = setTimeout(() => {\n        setOtpCountdown(prevCountdown => prevCountdown - 1);\n      }, 1000);\n    } else if (otpCountdown === 0) {\n      // Handle expiration or resend OTP logic here\n      console.log('OTP expired. Resend if needed.');\n    }\n    return () => clearTimeout(timer);\n  }, [isOtpSent, otpCountdown]);\n\n  // Handle form input changes\n  const handleInputChange = e => {\n    const {\n      name,\n      value\n    } = e.target;\n    setFormData(prevData => ({\n      ...prevData,\n      [name]: value\n    }));\n  };\n\n  // Handle form submission\n  const handleSubmit = e => {\n    e.preventDefault();\n    // Additional form validation logic here\n\n    // If the form is valid, send OTP\n    sendOtp();\n  };\n\n  // Send OTP logic\n  const sendOtp = async () => {\n    try {\n      // Send a request to the backend to generate and send OTP\n      // You need to implement this API endpoint in your Spring Boot backend\n      const response = await fetch('/api/send-otp', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          email: formData.email\n        })\n      });\n      const data = await response.json();\n      if (response.ok) {\n        setIsOtpSent(true);\n        toast.success('OTP sent successfully');\n      } else {\n        // Handle error, show pop-up, etc.\n        console.error(data.message);\n        toast.error('Error sending OTP');\n      }\n    } catch (error) {\n      console.error('Error sending OTP:', error);\n    }\n  };\n\n  // Handle OTP verification\n  const handleOtpVerification = async () => {\n    try {\n      // Check if the email in the form matches the email used for OTP verification\n      if (formData.email !== formData.otpEmail) {\n        // Show an error or handle the mismatch as needed\n        console.error('Email mismatch for OTP verification');\n        toast.error('Email mismatch for OTP verification');\n        return;\n      }\n\n      // Send a request to the backend to verify OTP\n      // You need to implement this API endpoint in your Spring Boot backend\n      const response = await fetch('/api/verify-otp', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          email: formData.email,\n          otp: formData.otp\n        })\n      });\n      const data = await response.json();\n      if (response.ok) {\n        // Registration successful, navigate to success page\n        navigate('/success');\n      } else {\n        // Handle OTP verification failure, show pop-up, etc.\n        console.error(data.message);\n        toast.error('Error verifying OTP');\n      }\n    } catch (error) {\n      console.error('Error verifying OTP:', error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Registration Form\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: isOtpSent ? handleOtpVerification : handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: [isOtpSent ? 'Enter OTP' : 'Email', /*#__PURE__*/_jsxDEV(\"input\", {\n          type: isOtpSent ? 'text' : 'email',\n          name: isOtpSent ? 'otp' : 'otpEmail',\n          value: isOtpSent ? formData.otp : formData.otpEmail,\n          onChange: handleInputChange,\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 132,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 9\n      }, this), isOtpSent && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Resend OTP in \", Math.floor(otpCountdown / 60), \":\", otpCountdown % 60, \" seconds\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: isOtpSent ? 'Verify OTP' : 'Send OTP'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ToastContainer, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 125,\n    columnNumber: 5\n  }, this);\n};\n_s(RegistrationForm, \"A3GaRiqAG/XLRSz5vCCh2bB/TtU=\", false, function () {\n  return [useNavigate];\n});\n_c = RegistrationForm;\nexport default RegistrationForm;\nvar _c;\n$RefreshReg$(_c, \"RegistrationForm\");","map":{"version":3,"names":["React","useState","useEffect","useNavigate","ToastContainer","toast","jsxDEV","_jsxDEV","RegistrationForm","_s","navigate","formData","setFormData","fullName","nickName","dob","gender","address","telephone","email","password","confirmPassword","otp","otpEmail","isOtpSent","setIsOtpSent","otpCountdown","setOtpCountdown","timer","setTimeout","prevCountdown","console","log","clearTimeout","handleInputChange","e","name","value","target","prevData","handleSubmit","preventDefault","sendOtp","response","fetch","method","headers","body","JSON","stringify","data","json","ok","success","error","message","handleOtpVerification","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","type","onChange","required","Math","floor","_c","$RefreshReg$"],"sources":["D:/projects/web_project_01/Frontend/web_project/src/Component/Common/RegistrationForm.jsx"],"sourcesContent":["// RegistrationForm.jsx\r\n\r\nimport React, { useState, useEffect } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { ToastContainer, toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\n\r\nconst RegistrationForm = () => {\r\n  const navigate = useNavigate();\r\n\r\n  // Form state\r\n  const [formData, setFormData] = useState({\r\n    fullName: '',\r\n    nickName: '',\r\n    dob: '',\r\n    gender: '',\r\n    address: '',\r\n    telephone: '',\r\n    email: '',\r\n    password: '',\r\n    confirmPassword: '',\r\n    otp: '',\r\n    otpEmail: '', // new field to store email for OTP verification\r\n  });\r\n\r\n  const [isOtpSent, setIsOtpSent] = useState(false);\r\n  const [otpCountdown, setOtpCountdown] = useState(120); // 2 minutes\r\n\r\n  useEffect(() => {\r\n    let timer;\r\n    if (isOtpSent && otpCountdown > 0) {\r\n      timer = setTimeout(() => {\r\n        setOtpCountdown((prevCountdown) => prevCountdown - 1);\r\n      }, 1000);\r\n    } else if (otpCountdown === 0) {\r\n      // Handle expiration or resend OTP logic here\r\n      console.log('OTP expired. Resend if needed.');\r\n    }\r\n    return () => clearTimeout(timer);\r\n  }, [isOtpSent, otpCountdown]);\r\n\r\n  // Handle form input changes\r\n  const handleInputChange = (e) => {\r\n    const { name, value } = e.target;\r\n    setFormData((prevData) => ({ ...prevData, [name]: value }));\r\n  };\r\n\r\n  // Handle form submission\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    // Additional form validation logic here\r\n\r\n    // If the form is valid, send OTP\r\n    sendOtp();\r\n  };\r\n\r\n  // Send OTP logic\r\n  const sendOtp = async () => {\r\n    try {\r\n      // Send a request to the backend to generate and send OTP\r\n      // You need to implement this API endpoint in your Spring Boot backend\r\n      const response = await fetch('/api/send-otp', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({ email: formData.email }),\r\n      });\r\n\r\n      const data = await response.json();\r\n\r\n      if (response.ok) {\r\n        setIsOtpSent(true);\r\n        toast.success('OTP sent successfully');\r\n      } else {\r\n        // Handle error, show pop-up, etc.\r\n        console.error(data.message);\r\n        toast.error('Error sending OTP');\r\n      }\r\n    } catch (error) {\r\n      console.error('Error sending OTP:', error);\r\n    }\r\n  };\r\n\r\n  // Handle OTP verification\r\n  const handleOtpVerification = async () => {\r\n    try {\r\n      // Check if the email in the form matches the email used for OTP verification\r\n      if (formData.email !== formData.otpEmail) {\r\n        // Show an error or handle the mismatch as needed\r\n        console.error('Email mismatch for OTP verification');\r\n        toast.error('Email mismatch for OTP verification');\r\n        return;\r\n      }\r\n\r\n      // Send a request to the backend to verify OTP\r\n      // You need to implement this API endpoint in your Spring Boot backend\r\n      const response = await fetch('/api/verify-otp', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({\r\n          email: formData.email,\r\n          otp: formData.otp,\r\n        }),\r\n      });\r\n\r\n      const data = await response.json();\r\n\r\n      if (response.ok) {\r\n        // Registration successful, navigate to success page\r\n        navigate('/success');\r\n      } else {\r\n        // Handle OTP verification failure, show pop-up, etc.\r\n        console.error(data.message);\r\n        toast.error('Error verifying OTP');\r\n      }\r\n    } catch (error) {\r\n      console.error('Error verifying OTP:', error);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h1>Registration Form</h1>\r\n      <form onSubmit={isOtpSent ? handleOtpVerification : handleSubmit}>\r\n        {/* ... Other form fields ... */}\r\n\r\n        <label>\r\n          {isOtpSent ? 'Enter OTP' : 'Email'}\r\n          <input\r\n            type={isOtpSent ? 'text' : 'email'}\r\n            name={isOtpSent ? 'otp' : 'otpEmail'}\r\n            value={isOtpSent ? formData.otp : formData.otpEmail}\r\n            onChange={handleInputChange}\r\n            required\r\n          />\r\n        </label>\r\n\r\n        {isOtpSent && (\r\n          <p>\r\n            Resend OTP in {Math.floor(otpCountdown / 60)}:{otpCountdown % 60} seconds\r\n          </p>\r\n        )}\r\n\r\n        <button type=\"submit\">\r\n          {isOtpSent ? 'Verify OTP' : 'Send OTP'}\r\n        </button>\r\n\r\n        <ToastContainer />\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default RegistrationForm;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}